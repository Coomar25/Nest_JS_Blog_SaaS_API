// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog_user {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  name                   String
  password               String
  address                String
  contact                String
  user_profile           String?                  @default("assets/defaults/default_image.png")
  city                   String
  country                String
  dob                    String
  postal                 String?                  @default("")
  state                  String                   @default("")
  blogpost               blog_post[]
  blog_comment           blog_comment[]
  blog_total_viewed_post blog_total_viewed_post[]
  blog_bookmarks         blog_bookmarks[]
  blog_like_dislike      blog_like_dislike[]
  blog_subscribe_letter  blog_subscribe_letter[]
}

enum BlogPostStatus {
  PUBLISHED
  PENDING
}

model blog_categories {
  id        Int         @id @default(autoincrement())
  name      String
  tags      String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  blog_post blog_post[]
}

model blog_post {
  id                     Int                      @id @default(autoincrement())
  slug                   String                   @unique
  title                  String
  description            String
  cover_image            String?                  @default("assets/defaults/default_image.png")
  tags                   String[]
  status                 BlogPostStatus           @default(PENDING)
  authorId               Int
  blog_user              blog_user                @relation(fields: [authorId], references: [id])
  category_id            Int
  blog_categories        blog_categories          @relation(fields: [category_id], references: [id])
  blog_like_dislike      blog_like_dislike[]
  blog_comment           blog_comment[]
  blog_bookmarks         blog_bookmarks[]
  blog_total_viewed_post blog_total_viewed_post[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model blog_like_dislike {
  id           Int       @id @default(autoincrement())
  like         Boolean   @default(false)
  dislike      Boolean   @default(false)
  blog_post_id Int
  blog_post    blog_post @relation(fields: [blog_post_id], references: [id])
  user_id      Int
  blog_user    blog_user @relation(fields: [user_id], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model blog_comment {
  id        Int       @id @default(autoincrement())
  comment   String
  userId    Int
  blog_user blog_user @relation(fields: [userId], references: [id])
  blog_id   Int
  blog_post blog_post @relation(fields: [blog_id], references: [id])
  creaedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model blog_bookmarks {
  id        Int       @id @default(autoincrement())
  blog_id   Int
  blog_post blog_post @relation(fields: [blog_id], references: [id])
  user_id   Int
  blog_user blog_user @relation(fields: [user_id], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model blog_total_viewed_post {
  id        Int       @id @default(autoincrement())
  blog_id   Int
  blog_post blog_post @relation(fields: [blog_id], references: [id])
  user_id   Int
  blog_user blog_user @relation(fields: [user_id], references: [id])
  isViewed  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model blog_subscribe_letter {
  id        Int       @id @default(autoincrement())
  email     String
  user_id   Int
  blog_user blog_user @relation(fields: [user_id], references: [id])
}
